name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Allow manual triggering from GitHub Actions UI
  # Trigger release workflow on new tags
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        node-version: ["22.x"]

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup Node.js with dependency caching
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Optional: Cache Electron binaries for faster builds
      - name: Cache Electron binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      # Install dependencies including rimraf
      - run: npm ci
      - run: npm install rimraf --save-dev

      # Install NSIS on Windows for electron-builder
      - name: Install NSIS
        if: matrix.os == 'windows-latest'
        run: choco install nsis -y

      # Build Windows Installer (unsigned)
      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        env:
          DEBUG: "electron-builder"
        run: |
          npx rimraf dist
          npx electron-builder build --win --x64 --config.forceCodeSigning=false
          echo "Note: This is an unsigned build. To remove Windows warnings, see CONTRIBUTING.md for code signing instructions"

      - name: Build DMG (macOS)
        if: matrix.os == 'macos-latest'
        env:
          DEBUG: "electron-builder"
        run: |
          npm install dmg-license
          npx electron-builder build --mac dmg

      # Debug: List files in dist/ after build
      - name: List dist files
        run: |
          echo "Listing dist/ contents:"
          ls -R dist || dir dist

      # Zip the Windows portable .exe
      # (Removed zipping step; upload .exe directly)

      # Upload built installers as artifacts for release job
      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: installers-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            dist/**/*.exe
            dist/**/*.dmg

      # Run tests
      - run: npm test

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')) || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create GitHub Release and Upload Installers
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/**/*.exe,dist/**/*.dmg"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: auto-release-${{ github.run_number }}
          name: "Automated Release ${{ github.run_number }}"
          body: "This release was triggered automatically.\n\nIncluded assets:\n- Windows: Setup.exe (unsigned - may show security warning)\n- macOS: .dmg\n\nTo trigger a release, push to main with a commit message containing [release], or use the Run workflow button in Actions.\n\nFor code signing instructions to remove Windows warnings, see CONTRIBUTING.md"
          draft: false
          prerelease: false
