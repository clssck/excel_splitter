name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: # Allow manual triggering from GitHub Actions UI
  # Trigger release workflow on new tags
  # Note: This release trigger seems incorrect, release creation doesn't trigger like this.
  # Keeping the [release] commit message trigger and workflow_dispatch for the release job.
  # release:
  #   types: [created]

permissions:
  contents: write # Needed for the release job to create releases

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        node-version: ["22.x"] # Using Node 22 from original file

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup Node.js with dependency caching
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Cache Electron and builder binaries
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\electron
            ~\AppData\Local\electron-builder
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      # Install dependencies
      - run: npm ci
      # Removed explicit rimraf install - it's a dev dependency

      # Run Linter
      - name: Lint Check
        run: npm run lint

      # Install NSIS on Windows for electron-builder
      - name: Install NSIS
        if: matrix.os == 'windows-latest'
        run: |
          choco install nsis --version 3.08 --no-progress --accept-license --force
          echo "C:\Program Files (x86)\NSIS" >> $env:GITHUB_PATH
          echo "ELECTRON_BUILDER_NSIS_PATH=C:\Program Files (x86)\NSIS" >> $env:GITHUB_ENV

      # Build Windows Installer (unsigned) using npm script
      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        run: npm run dist:win

      # Build DMG (macOS) using npm script
      - name: Build DMG (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        # Removed explicit dmg-license install

      # Debug: List files in dist/ after build
      - name: List dist files
        run: |
          echo "Listing dist/ contents:"
          ls -R dist || dir dist /s /b dist

      # Upload built installers as artifacts for release job
      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: installers-${{ matrix.os }}
          # Changed name slightly to remove node version, less noise
          path: |
            dist/**/*.exe
            dist/**/*.dmg
          if-no-files-found: error # Keep error check

      # Run tests
      - run: npm test

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    # Trigger release job only on push to main with [release] in commit message OR manual dispatch
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')) || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Download all artifacts into dist directory
          # No specific name needed, download all

      # Debug: List downloaded artifacts
      - name: List downloaded artifacts
        run: ls -R dist

      - name: Create GitHub Release and Upload Installers
        uses: ncipollo/release-action@v1
        with:
          # Artifact path adjusted to match downloaded structure
          artifacts: "dist/installers*/*.exe,dist/installers*/*.dmg"
          token: ${{ secrets.GITHUB_TOKEN }}
          # Using commit SHA for tag to avoid potential conflicts
          tag: release-${{ github.sha }}
          name: "Automated Release ${{ github.run_number }}"
          body: "This release was triggered automatically.\n\nIncluded assets:\n- Windows Setup (unsigned - may show security warning)\n- macOS DMG\n\nTo trigger a release, push to main with a commit message containing [release], or use the Run workflow button in Actions."
          draft: false
          prerelease: false
