name: Node.js CI

on:
  push:
    branches: [main]
    paths:
      - "**.js"
      - "package.json"
      - "build/**"
  # Only trigger on push to main branch for JS/build changes
  # Manual trigger still available
  workflow_dispatch:

permissions:
  contents: write # Needed for release creation
  # Default permissions for GITHUB_TOKEN
  actions: read
  checks: write
  security-events: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            node-version: "22.x"
          - os: macos-latest
            node-version: "22.x"
        # Only build with Node 22.x for both Windows and macOS

    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup Node.js with dependency caching
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Cache Electron and builder binaries
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\electron
            ~\AppData\Local\electron-builder
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}

      # Install dependencies
      - run: npm ci
      # Removed explicit rimraf install - it's a dev dependency

      # Update dependencies to latest compatible versions
      - name: Update dependencies
        run: npm update

      # Run Linter
      - name: Lint Check
        run: npm run lint

      # Run tests before building (if they exist)
      - name: Run Tests
        run: npm test || echo "No tests found, continuing with build"
        continue-on-error: true

      # Prepare Windows build environment
      - name: Prepare Windows Build
        if: matrix.os == 'windows-latest'
        run: |
          # Clean NSIS cache
          echo "Cleaning NSIS cache..."
          Remove-Item -Recurse -Force "$env:LOCALAPPDATA\electron-builder\Cache\nsis" -ErrorAction SilentlyContinue

          # Make sure we have the latest npm
          npm install -g npm

          # Show environment info for debugging
          echo "Environment variables:"
          Get-ChildItem env:
          echo "Node version:"
          node --version
          echo "npm version:"
          npm --version
          echo "electron-builder version:"
          npx electron-builder --version

      # Build platform packages
      - name: Build Windows Package
        if: matrix.os == 'windows-latest'
        run: npm run dist:win

      - name: Build DMG (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac

      # Debug: List files in dist/ after build
      - name: List dist files
        run: |
          echo "Listing dist/ contents:"
          ls -R dist || dir dist /s /b dist

      # Upload built installers as artifacts for release job
      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.zip
          if-no-files-found: error # Keep error check

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/*.dmg
            dist/**/*.dmg
          if-no-files-found: error # Keep error check

  release:
    name: Release
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    # Trigger release job only on push to main with [release] in commit message OR manual dispatch
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')) || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Download all artifacts into dist directory
          # No specific name needed, download all

      # Debug: List downloaded artifacts
      - name: List downloaded artifacts
        run: ls -R dist

      - name: Create GitHub Release and Upload Installers
        uses: ncipollo/release-action@v1
        with:
          # Artifact path adjusted to match downloaded structure
          artifacts: "dist/windows-artifacts/*.zip,dist/macos-artifacts/*.dmg"
          token: ${{ secrets.GITHUB_TOKEN }}
          # Using commit SHA for tag to avoid potential conflicts
          tag: release-${{ github.sha }}
          name: "v1.1.0 release"
          body: |
            # ExcelChopper v1.1.0

            ## Improvements
            - Fixed update check logic for non-standard version tags
            - Improved version comparison with GitHub releases
            - Updated build process for better compatibility

            ## Downloads
            - Windows: Download the .zip file, extract, and run ExcelChopper.exe
            - macOS: Download the .dmg file and install as usual
          draft: false
          prerelease: false
